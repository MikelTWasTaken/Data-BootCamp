Indexing Sequences
Sequences can be indexable, which means each element can be retrieved with his index : sequence_name[index_num].

For example, using a list

my_name = "Jack"
hello = "Hello World"
my_age = 27

my_list = [my_name, hello, my_age]
print(my_list[0]) # The result gives us "Jack" 


You may wonder why does my_list[0] give me the first item in my list? Be sure to take note that indexes start from [0], which would be the first item in the list, and index [1], will give us the second item in our list being the hello variable with the value of "Hello World".



There are other indexing methods:

Negative indexes, meaning starting from the end to the beginning (sequence_name[-index_num]) this is an example using a tuple:
my_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)
print(my_tuple[-2])  # The result gives us the number 8


Range indexes return a list from one index to the other (sequence_name[start:end]), this is an example using a list:
my_list = [10, 20, 30, 40, 50, 60, 70, 80, 90]
print(my_list[0:4])  # The result gives us [10, 20, 30, 40]


When using ranges, the end index is not included

Strings
Actually, str is a sequence; it’s a sequence of letters.
You can index the letters of a string with the indexing technique.

>>> my_name = "Rick"

>>> print(my_name[0])
"R"

>>> print(my_name[2])
"c"

>>> print(my_name[-1])
"k"

>>> print(my_name[1:3])
"ic"

Lists
Lists let you store a collection of items. These items can be of any type: integers, strings, booleans or even other lists.
See the official documentation here

A List is a collection that is ordered and changeable. It allows duplicate members.

To create a list, use square brackets [], and insert elements, separated by comma ,. Elements can be every data type.

For example:

>>> my_hobbies = ["Eat", "Sleep", "Code"]
To access the items, refer to the index number.

>>> my_hobbies[0]
"Eat"

>>> my_hobbies[2]
"Code"

>>> my_hobbies[-2]
"Sleep"

Modify an element
The list is mutable; it means that the contents of a list can be updated. To change an element in a list, refer to the index number and assign a new value.

Careful: Indexes in list start from 0, not from 1

>>> print(my_hobbies)
["Eat", "Sleep", "Code"]

>>> my_hobbies[1] = "Meditate"

>>> print(my_hobbies)
["Eat", "Meditate", "Code"]
Be careful! If you try to refer to an index that doesn’t exist, your program will crash to an IndexError

Add an element
Adding an element to a list is called appending.

To append an item to a list, use the append() method.

>>> print(my_hobbies)
["Eat", "Meditate", "Code"]

>>> my_hobbies.append("Baseball")

>>> print(my_hobbies)
["Eat", "Meditate", "Code", "Baseball"]
Remove an element
There are several methods to remove items from a list.

To remove a secified item, use the remove method; this method removes the first occurrence of the element.
>>> print(my_hobbies)
["Eat", "Meditate", "Code"]

>>> my_hobbies.remove("Meditate")

>>> print(my_hobbies)
["Eat", "Code"]
To remove an item by its index, use the pop method; this method removes the element at the given index and returns it.
>>> print(my_hobbies)
["Eat", "Code"]

>>> my_hobbies.pop(0)

>>> print(my_hobbies)
["Code"]
Adding two lists
Adding two lists will concatenate them.

>>> my_hobbies = ["Food", "Code"]

>>> additional_hobbies = ["Sport", "More code"]

>>> my_hobbies + additional_hobbies 
["Food", "Code", "Sport", "More code"]


List functions
List have several built-in functions you can use.

Length
Using the len() function allows to retrieve the number of items contained in a given list.
fruits = ["apple","pear", "banana", "melon"]
len(fruits)
>> 4


Sum
If you have a list of numbers, you can get the sum of all numbers again through a function.
numbers = [3, 12, 1, -4]
sum(numbers)
>> 12


Sorting
There are different ways of sorting elements of a list, sorted() lets you straightforwardly do that.
If you have numbers, a list will be sorted from smallest to biggest.

numbers = [3, 5, 1, 2]
sorted(numbers)
>> [1, 2, 3, 5]


If you have strings, they will get sorted alphabetically.

letters = ['d', 'a', 'g', 'b']
sorted(letters)
>> ['a', 'b', 'd', 'g']


It will not work if you have mixed values.

mixed = [3, 'd', 1, 'a']
sorted(mixed)
>> error!


More list methods
food = ['spam', 'eggs', 'ham']
food.append('sushi')
print(food)
>> ['spam', 'eggs', 'ham', 'sushi']

food.insert(0, 'beans')
print(food)
>> ['beans', 'spam', 'eggs', 'ham', 'sushi']

food.extend(['bread', 'water'])
print(food)
>> ['beans', 'spam', 'eggs', 'ham', 'sushi', 'bread', 'water']

Tuples
Tuples are immutable lists, which means items can’t be changed.

To create a tuple, use parentheses:

>>> my_tuple = (5,6,7)


The good thing about tuples is that they can be unpacked, meaning each value will go to one variable:

>>> a, b, c = my_tuple

>>> print(a)
5

>>> print(b)
6

>>> print(c)
7

Loops
Loops are a fundamental programming concept that allows you to iterate over the items of a list or repeat a given action a defined or even infinite number of times.

When used in conjunction with lists, loops let you access each element successively of said list. We call this process “iterating”.

In computer programming, a loop is a sequence of instructions that is continually repeated until a specific condition is reached.

There are two main types of loops: for loops and while loops.

See the official documentation here



For loops
For loops are primarily used with lists: you go over each element of the list in order; it stops automatically once it reaches the end of the list.

For loops, start with the keyword for. Then comes what we call an “iterator”, a variable whose value will change at each turn of the loop.

We’ll use this variable within the loop as the current value for a given iteration.

First, the syntax:

for <variable_name> in <sequence_name>:
    CODE
    CODE

Example
fruits = ['apple', 'banana', 'kiwi', 'pear']

for fruit in fruits:
  print(fruit)


>> apple
>> banana
>> kiwi
>> pear


In the for loop above, fruit (singular) is our iterator. Its values change at every turn of the loop. It is successively: 'apple', 'banana', 'kiwi' and finally 'pear'.